// <auto-generated />
using System;
using Atilim.Services.Identity.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Atilim.Services.Identity.Infrastructure.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.StudentEntities.ContactInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StudentIdentityId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("StudentIdentityId")
                        .IsUnique();

                    b.ToTable("ContactInformations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "DEMİRCİKARA MAH. B.ONAT CAD. HEDE SİT. B BLOK NO : 1",
                            City = "ANKARA",
                            Country = "Türkiye",
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 885, DateTimeKind.Local).AddTicks(7352),
                            District = "PURSAKLAR",
                            Email = "mno@xyz.com",
                            IsDeleted = false,
                            MobilePhoneNumber = "5555424245",
                            StudentIdentityId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "CUMHURİYET MAH. BİRİNCİ SOK. İKİNCİ APT. NO:111/6",
                            City = "Ankara",
                            Country = "Türkiye",
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 885, DateTimeKind.Local).AddTicks(7373),
                            District = "YENİMAHALLE",
                            Email = "abc@hotmail.com",
                            IsDeleted = false,
                            MobilePhoneNumber = "5332342342",
                            StudentIdentityId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "SİTELER MAHALLESİ 6223 SOKAK DURU APT. NO:11 KAT:3 ",
                            City = "Ankara",
                            Country = "Türkiye",
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 885, DateTimeKind.Local).AddTicks(7375),
                            District = "POLATLI",
                            Email = "klm@outlook.com",
                            IsDeleted = false,
                            MobilePhoneNumber = "5408932042",
                            StudentIdentityId = 3
                        },
                        new
                        {
                            Id = 4,
                            Address = "TURAN GÜNEŞ BULVARI TAMTAM SİTESİ 13. CAD. NO:51",
                            City = "Ankara",
                            Country = "Türkiye",
                            CreatedBy = 0,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 885, DateTimeKind.Local).AddTicks(7377),
                            District = "KEÇİÖREN",
                            Email = "ghi@abc.com",
                            IsDeleted = false,
                            MobilePhoneNumber = "5305464646",
                            StudentIdentityId = 4
                        },
                        new
                        {
                            Id = 5,
                            Address = "AHMET HAMDİ SOK. NO:19/15",
                            City = "Ankara",
                            Country = "Türkiye",
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 885, DateTimeKind.Local).AddTicks(7379),
                            District = "SİNCAN",
                            Email = "prs@hotmail.com",
                            IsDeleted = false,
                            MobilePhoneNumber = "5302908432",
                            StudentIdentityId = 5
                        },
                        new
                        {
                            Id = 6,
                            Address = "KUŞADASI SOK. NO:123 KARAAĞAÇ",
                            City = "Ankara",
                            Country = "Türkiye",
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 885, DateTimeKind.Local).AddTicks(7381),
                            District = "ÇANKAYA",
                            Email = "def@gmail.com",
                            IsDeleted = false,
                            MobilePhoneNumber = "5437657567",
                            StudentIdentityId = 6
                        });
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.StudentEntities.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurriculumName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumName")
                        .IsUnique()
                        .HasDatabaseName("CurriculumName");

                    b.HasIndex("Id");

                    b.ToTable("Curriculums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 886, DateTimeKind.Local).AddTicks(1748),
                            CurriculumName = "Bilgisayar_Mühendisliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 886, DateTimeKind.Local).AddTicks(1756),
                            CurriculumName = "Grafik_Mühendisliği",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 886, DateTimeKind.Local).AddTicks(1757),
                            CurriculumName = "Ingiliz_Dil_Edebiyatı",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.StudentEntities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Credit")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LessonCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LessonCode")
                        .IsUnique();

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 886, DateTimeKind.Local).AddTicks(4811),
                            Credit = 5,
                            IsDeleted = false,
                            LessonCode = "HUM101",
                            LessonName = "Türk Demokrasi Tarihi",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 886, DateTimeKind.Local).AddTicks(4820),
                            Credit = 6,
                            IsDeleted = false,
                            LessonCode = "MATH102",
                            LessonName = "Calculus 2",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 886, DateTimeKind.Local).AddTicks(4822),
                            Credit = 6,
                            IsDeleted = false,
                            LessonCode = "MATE103",
                            LessonName = "Metalurjiye Giriş",
                            Status = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 886, DateTimeKind.Local).AddTicks(4824),
                            Credit = 5,
                            IsDeleted = false,
                            LessonCode = "GRA105",
                            LessonName = "Grafik Dizayn",
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 886, DateTimeKind.Local).AddTicks(4826),
                            Credit = 4,
                            IsDeleted = false,
                            LessonCode = "CMPE201",
                            LessonName = "Bilgisayar Teknolojileri",
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 886, DateTimeKind.Local).AddTicks(4827),
                            Credit = 4,
                            IsDeleted = false,
                            LessonCode = "ENG102",
                            LessonName = "İngilizce 2",
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 886, DateTimeKind.Local).AddTicks(4829),
                            Credit = 6,
                            IsDeleted = false,
                            LessonCode = "MATH201",
                            LessonName = "İleri Calculus ",
                            Status = true
                        });
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.StudentEntities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("StudentIdentityId")
                        .HasColumnType("int");

                    b.Property<int>("StudentNo")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("Id");

                    b.HasIndex("StudentIdentityId")
                        .IsUnique();

                    b.HasIndex("StudentNo")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 887, DateTimeKind.Local).AddTicks(3013),
                            CurriculumId = 1,
                            IsDeleted = false,
                            StudentIdentityId = 1,
                            StudentNo = 23462368
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 887, DateTimeKind.Local).AddTicks(3020),
                            CurriculumId = 1,
                            IsDeleted = false,
                            StudentIdentityId = 2,
                            StudentNo = 27482379
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 887, DateTimeKind.Local).AddTicks(3022),
                            CurriculumId = 2,
                            IsDeleted = false,
                            StudentIdentityId = 3,
                            StudentNo = 34565479
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 887, DateTimeKind.Local).AddTicks(3024),
                            CurriculumId = 2,
                            IsDeleted = false,
                            StudentIdentityId = 4,
                            StudentNo = 53456346
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 887, DateTimeKind.Local).AddTicks(3025),
                            CurriculumId = 3,
                            IsDeleted = false,
                            StudentIdentityId = 5,
                            StudentNo = 34674575
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 887, DateTimeKind.Local).AddTicks(3027),
                            CurriculumId = 3,
                            IsDeleted = false,
                            StudentIdentityId = 6,
                            StudentNo = 64672359
                        });
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.StudentEntities.StudentIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactInformationId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TCIdentificationNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("TCIdentificationNo")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("Name", "Surname");

                    b.ToTable("StudentIdentities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityOfBirth = "Kayseri",
                            ContactInformationId = 0,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 890, DateTimeKind.Local).AddTicks(7),
                            DateOfBirth = new DateTime(1983, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Hasan",
                            StudentId = 1,
                            Surname = "Ersoy",
                            TCIdentificationNo = "45456747611",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CityOfBirth = "Adana",
                            ContactInformationId = 0,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 890, DateTimeKind.Local).AddTicks(99),
                            DateOfBirth = new DateTime(2000, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Mehmet",
                            StudentId = 2,
                            Surname = "Yılmaz",
                            TCIdentificationNo = "67967856634",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CityOfBirth = "Ankara",
                            ContactInformationId = 0,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 890, DateTimeKind.Local).AddTicks(107),
                            DateOfBirth = new DateTime(2001, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Ahmet",
                            StudentId = 3,
                            Surname = "Ünal",
                            TCIdentificationNo = "72347322958",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CityOfBirth = "Sivas",
                            ContactInformationId = 0,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 890, DateTimeKind.Local).AddTicks(113),
                            DateOfBirth = new DateTime(2000, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Mustafa",
                            StudentId = 4,
                            Surname = "Işık",
                            TCIdentificationNo = "97850348520",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            CityOfBirth = "Uşak",
                            ContactInformationId = 0,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 890, DateTimeKind.Local).AddTicks(119),
                            DateOfBirth = new DateTime(2001, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Ayşe",
                            StudentId = 5,
                            Surname = "Erdoğan",
                            TCIdentificationNo = "32756874239",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            CityOfBirth = "Kütahya",
                            ContactInformationId = 0,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2023, 9, 14, 23, 50, 0, 890, DateTimeKind.Local).AddTicks(124),
                            DateOfBirth = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Fatma",
                            StudentId = 6,
                            Surname = "Korkmaz",
                            TCIdentificationNo = "98423479320",
                            UserId = 7
                        });
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6477d422-3b68-461a-9187-fe48d8f6932d",
                            Email = "admin@atilimProject.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "atilim",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e35c1da-c059-4fcf-bf00-ed2b1f41790e",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "atilim.admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e01b5384-be07-4c4d-80e4-885cc5015a7b",
                            Email = "hasan.ersoy@atilimProject.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "hasan",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5be026b4-97ed-4700-80c4-2b55fe8d02fe",
                            Surname = "ersoy",
                            TwoFactorEnabled = false,
                            UserName = "hasan.ersoy"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d57a25a-8208-4222-b961-70ad25273c60",
                            Email = "mehmet.yilmaz@atilimProject.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "mehmet",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f943e121-7666-473e-b6b1-8256a5dab836",
                            Surname = "yilmaz",
                            TwoFactorEnabled = false,
                            UserName = "mehmet.yilmaz"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a39809d8-87bb-432b-931d-f162ec095dcf",
                            Email = "ahmet.unal@atilimProject.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "ahmet",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41d56997-91f0-47df-8a9a-1bf9e6a85713",
                            Surname = "unal",
                            TwoFactorEnabled = false,
                            UserName = "ahmet.unal"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7e8399c-ad9d-4ed5-b3c5-9deab29f0794",
                            Email = "mustafa.isik@atilimProject.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "mustafa",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3702270a-95d7-4058-942f-8dfc813fe362",
                            Surname = "isik",
                            TwoFactorEnabled = false,
                            UserName = "mustafa.isik"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec69b772-44e9-4873-aeae-45984ce3fc17",
                            Email = "ayse.erdogan@atilimProject.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "ayse",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02d9c1b5-ef72-4ed4-aebb-ca0c093fa697",
                            Surname = "erdogan",
                            TwoFactorEnabled = false,
                            UserName = "ayse.erdogan"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22fc427f-0aa3-4fe0-a525-18b3f8e0964e",
                            Email = "fatma.korkmaz@atilimProject.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "fatma",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b793ac02-507c-49f9-a92e-ebf4ed4de524",
                            Surname = "korkmaz",
                            TwoFactorEnabled = false,
                            UserName = "fatma.korkmaz"
                        });
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("CurriculumLesson", b =>
                {
                    b.Property<int>("CurriculumsId")
                        .HasColumnType("int");

                    b.Property<int>("LessonsId")
                        .HasColumnType("int");

                    b.HasKey("CurriculumsId", "LessonsId");

                    b.HasIndex("LessonsId");

                    b.ToTable("CurriculumLesson");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f4371c72-ae1b-461d-8d1b-8e8f75a1a0b6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "b8a814d1-8463-486b-88c0-b612e98fb6a9",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.StudentEntities.ContactInformation", b =>
                {
                    b.HasOne("Atilim.Services.Identity.Domain.Entities.StudentEntities.StudentIdentity", "StudentIdentity")
                        .WithOne("ContactInformation")
                        .HasForeignKey("Atilim.Services.Identity.Domain.Entities.StudentEntities.ContactInformation", "StudentIdentityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentIdentity");
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.StudentEntities.Student", b =>
                {
                    b.HasOne("Atilim.Services.Identity.Domain.Entities.StudentEntities.Curriculum", "Curriculum")
                        .WithMany("Students")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Atilim.Services.Identity.Domain.Entities.StudentEntities.StudentIdentity", "StudentIdentity")
                        .WithOne("Student")
                        .HasForeignKey("Atilim.Services.Identity.Domain.Entities.StudentEntities.Student", "StudentIdentityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("StudentIdentity");
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.StudentEntities.StudentIdentity", b =>
                {
                    b.HasOne("Atilim.Services.Identity.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CurriculumLesson", b =>
                {
                    b.HasOne("Atilim.Services.Identity.Domain.Entities.StudentEntities.Curriculum", null)
                        .WithMany()
                        .HasForeignKey("CurriculumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atilim.Services.Identity.Domain.Entities.StudentEntities.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Atilim.Services.Identity.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Atilim.Services.Identity.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atilim.Services.Identity.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Atilim.Services.Identity.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.StudentEntities.Curriculum", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Atilim.Services.Identity.Domain.Entities.StudentEntities.StudentIdentity", b =>
                {
                    b.Navigation("ContactInformation")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
